const moves = document.querySelector(".moves-count")
const timeValue = document.getElementById("time")
const startButton = document.getElementById("start")
const stopButton = document.getElementById("stop")
const gameContainer = document.querySelector(".game-container")
const result = document.getElementById("result")
const controls = document.querySelector(".controls-container")
let cards;
let interval;
let firstCard = false;
let secondCard = false;
//Items array
const items = [
    { name: "icon1", image: "/image/icon1.png"},
    { name: "icon2", image: "/image/icon2.png"},
    { name: "icon3", image: "/image/icon3.png"},
    { name: "icon4", image: "/image/icon4.png"},
    { name: "icon5", image: "/image/icon5.png"},
    { name: "icon6", image: "/image/icon6.png"},
    { name: "icon7", image: "/image/icon7.png"},
    { name: "icon8", image: "/image/icon8.png"},
    { name: "icon9", image: "/image/icon9.png"},
    { name: "icon10", image: "/image/icon10.png"},
    { name: "icon11", image: "/image/icon11.png"},
    { name: "icon12", image: "/image/icon12.png"},
];
//Initial Time 
let seconds = 0,
     minutes = 0;
//Initial moves and win count
let movesCount = 0,
    winCount = 0;
//For timer
const timeGenerator = () => {
   seconds += 1; 
    //minutes logic
  if (seconds >= 60){
    minutes += 1;
    seconds = 0;

  };  
  //format time before displaying
  let secondsValue = seconds < 10 ? `0${seconds}` : seconds;
  let minutesValue = minutes < 10 ? `0${minutes}` : minutes;
  timeValue.innerHTML = `<span>Time:</span>${minutesValue}:${secondsValue}`;
};
//for calculating moves
const movesCounter = () => {
    movesCount += 1;
    moves.innerHTML = `<span>Moves:</span>${movesCount}`;

};
//Pick random object from the items array
const generateRandom = (size = 4) => {
    //temporary array
    let tempArray = [...items];
    //initializes cardValues array
    let cardValues = [];
    //size should be double (4*4 matrix)/2 since pairs of objects would exist
    size = (size * size) / 2;
    //Random object selection 
    for (let i = 0 ; i < size; i++){
        const randomIndex = Math.floor(Math.random() * tempArray.length);
        cardValues.push(tempArray[randomIndex]);
        //once selected remove the object from temp array
        tempArray.splice(randomIndex, 1);


    }
    return cardValues;

};

const matrixGenerator = (cardValues, size = 4 ) => {
    gameContainer.innerHTML = "";
    cardValues = [...cardValues, ...cardValues];
    //simple shuffle
    cardValues.sort(() => Math.random() - 0.5);
    for (let i = 0 ; i < size * size; i++){
        /*
        create cards
        before => front side (containers question mark)
        after => back side (containers actual image)
        data-card-values is a custom attribute which stores the names of the cards to later
         */
        gameContainer.innerHTML += `
          <div class="card-container" data-card-value="${cardValues[i].name}">
          <div class="card-before">?</div>
          <div class="card-after">
          <img src="${cardValues[i].image}" class="image">
          </div>
          </div>
        `
        

    }
    gameContainer.style.gridTemplateColumns = `
    repeat(${size},auto)`;
    //Cards
    cards = document.querySelectorAll(".card-container");
    cards.forEach((card) => {
        card.addEventListener("click", () => {
            //if selector card is not match yet them only run (i.e already matched card when clicked would be ignored 
            
            if (!card.classList.contains("matched")){
                //flip the clicked
                card.classList.add("flipped");
                //if it is the firstCard (!firstCard since  firstCard is initially false)
                if (!firstCard){
                // so current card will become firstcard 
                   firstCard = card;
                   //current cards value becomes
                   firstCardValue = card.getAttribute("data-card-value");
                }
                else {
                    //increment moves since user selector second card
                    movesCounter();
                    //secondCard and value
                    secondCard = card;
                    let secondCardValue = card.getAttribute("data-card-value");
                    if (firstCardValue == secondCardValue){
                        //if both cards match adÄ‘ matched class so these cards would beignored next time
                        firstCard.classList.add("matched");
                        secondCard.classList.add("matched");
                        firstCard = false;
                        //winCount increment as user found a correct match
                        winCount += 1;
                        // check if wincount == half of cardValues
                        if (winCount == Math.floor(cardValues.length / 2)){
                            result.innerHTML = `
                            <h2>You Won</h2>
                            <h4>Moves: ${movesCount}</h4>`;
                            stopGame();
                            
                        }
                    }else {
                      // if the cards don't match 
                      //flip the cards back to normal
                      let [tempFirst, tempSecond] = [firstCard, secondCard];
                      firstCard = false;
                      secondCard = false;
                      let delay = setTimeout (() => {
                          tempFirst.classList.remove("flipped");
                          tempSecond.classList.remove("flipped");
    
                      },900);
                    }
                }
            }
        })
    })
         
  
}

//Start game 
startButton.addEventListener("click", ()=> {
    movesCount = 0;

    time = 0;
    //controls and button visibility 
    controls.classList.add("hide");
    stopButton.classList.remove("hide");
    startButton.classList.add("hide");
    //start timer
    interval = setInterval(timeGenerator, 1000);
    //initial moves 
    moves.innerHTML = `<span>Moves:</span> ${movesCount}`;
    initializer();

});
//stop game 
stopButton.addEventListener("click",(stopGame = () => {
    controls.classList.remove("hide");
    stopButton.classList.add("hide");
    startButton.classList.remove("hide");
    clearInterval(interval);
}));
//initialize values and func calls
const initializer = () => {
    result.innerText ="";
    winCount = 0;
    let cardValues = generateRandom();
    console.log(cardValues);
    matrixGenerator(cardValues);
};
initializer();